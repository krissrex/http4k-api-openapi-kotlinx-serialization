<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>no.krex</groupId>
  <artifactId>http4k-api-openapi-kotlinx-serialization</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <kotlin.compiler.jvmTarget>21</kotlin.compiler.jvmTarget>
    <kotlin.compiler.apiVersion>2.1</kotlin.compiler.apiVersion>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- IntelliJ default value for `maven.build.timestamp.format` is apparently `yyyyMMdd-HHmm`. -->
    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>
    <kotlin.code.style>official</kotlin.code.style>

    <!-- Deps -->
    <kotlin.version>2.1.20</kotlin.version>
    <kotlinx-serialization.version>1.8.1</kotlinx-serialization.version>

    <!-- Test-->
    <http4k.version>6.6.1.0</http4k.version>
    <junit.version>5.12.2</junit.version>
    <selfie-runner-junit5.version>2.5.2</selfie-runner-junit5.version>

    <!-- Maven -->
    <maven.version>3.9.9</maven.version>

    <ktfmt.version>0.54</ktfmt.version>
    <jacoco-maven-plugin.version>0.8.13</jacoco-maven-plugin.version>
    <maven-failsafe-plugin.version>3.5.3</maven-failsafe-plugin.version>
    <maven-shade-plugin.version>3.6.0</maven-shade-plugin.version>
    <sonar.version>5.1.0.4751</sonar.version>
    <maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>
    <spotless-maven-plugin.version>2.44.4</spotless-maven-plugin.version>

    <swagger-core.version>2.2.24</swagger-core.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-bom</artifactId>
        <version>${kotlin.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.http4k</groupId>
        <artifactId>http4k-bom</artifactId>
        <version>${http4k.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
    </dependency>

    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-serialization-json</artifactId>
      <version>${kotlinx-serialization.version}</version>
    </dependency>

    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-api-openapi</artifactId>
    </dependency>

    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-core</artifactId>
      <version>${swagger-core.version}</version>
    </dependency>

    <!--        Testing         -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-server-jetty</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.http4k</groupId>
      <artifactId>http4k-format-kotlinx-serialization</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.diffplug.selfie</groupId>
      <artifactId>selfie-runner-junit5</artifactId>
      <version>${selfie-runner-junit5.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <version>2.9.0</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <configuration>
          <jvmTarget>21</jvmTarget>
          <compilerPlugins>
            <plugin>kotlinx-serialization</plugin>
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-serialization</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <sourceDirs>
                <source>src/main/kotlin</source>
                <source>target/generated-sources/annotations</source>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <phase>test-compile</phase>
            <configuration>
              <sourceDirs>
                <source>src/test/kotlin</source>
                <source>target/generated-test-sources/test-annotations</source>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Jacoco for test coverage reports. Can be used by sonarcloud.io -->
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>jacoco-initialize</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-site</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Unit tests. -DskipTests to skip. Runs in mvn test. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Automatically runs *Test files. -->
          <excludedGroups>integration</excludedGroups>
        </configuration>
      </plugin>
      <plugin>
        <!-- Integration tests. -DskipTests or -DskipITs to skip. Runs in mvn verify. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <configuration>
          <!-- Automatically runs *IT files. -->
          <includes>
            <include>*Test</include>
          </includes>
          <groups>integration</groups>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- spotless with ktfmt for code style -->
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless-maven-plugin.version}</version>
        <configuration>
          <formats>
            <format>
              <includes>
                <include>.gitignore</include>
              </includes>
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>2</spacesPerTab>
              </indent>
            </format>
          </formats>
          <pom>
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom>
              <expandEmptyElements>false</expandEmptyElements>
              <nrOfIndentSpace>2</nrOfIndentSpace>
            </sortPom>
          </pom>
          <kotlin>
            <ktfmt>
              <version>${ktfmt.version}</version>
              <style>META</style>
            </ktfmt>
          </kotlin>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>

    </plugins>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
  </build>

  <profiles>
    <profile>
      <id>ci-build</id>
      <activation>
        <property>
          <name>env.CI</name>
        </property>
      </activation>
      <properties>
        <!--suppress UnresolvedMavenProperty -->
        <build.commit>${env.GIT_COMMIT_SHA}</build.commit>
        <!--suppress UnresolvedMavenProperty -->
        <build.branch>${env.BRANCH_NAME}</build.branch>
        <!--suppress UnresolvedMavenProperty -->
        <build.number>${env.RUN_NUMBER}</build.number>
      </properties>
    </profile>

    <profile>
      <id>sonarcloud</id>
      <activation>
        <property>
          <name>env.SONARCLOUD_TOKEN</name>
        </property>
      </activation>
      <properties>
        <sonar.organization>capralifecycle</sonar.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.projectKey>capralifecycle_coop-giftcard</sonar.projectKey>
        <sonar.token>${env.SONARCLOUD_TOKEN}</sonar.token>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>${sonar.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>sonar</goal>
                </goals>
                <phase>verify</phase>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>${maven-enforcer-plugin.version}</version>
            <executions>
              <execution>
                <id>enforce-maven</id>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireMavenVersion>
                      <version>${maven.version}</version>
                    </requireMavenVersion>
                    <banDuplicatePomDependencyVersions/>
                    <dependencyConvergence/>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>

</project>
